#! /usr/bin/env ruby

$LOAD_PATH << File.expand_path("../../lib", __FILE__)

require "aws-sdk-resources"
require "clamp"
require "swa/ec2/instance"
require "yaml"

$stdout.sync = true
$stderr.sync = true

Clamp do

  subcommand "ec2", "EC2 stuff" do

    subcommand ["instances", "is"], "list instances" do

      option "--filter", "NAME=VALUE", "apply a filter",
             :multivalued => true, :attribute_name => :filters
      option "--tagged", "KEY[=VALUE]", "with matching tag",
             :multivalued => true, :attribute_name => :tag_list
      option "--named", "NAME", "with matching name"
      option "--stack", "NAME", "from the named CloudFormation stack"

      self.default_subcommand = "summary"

      subcommand ["summary", "s"], "brief summary (one per line)" do

        def execute
          instances.each do |i|
            puts i.summary
          end
        end

      end

      subcommand ["detail", "d"], "full details" do

        def execute
          display_data(instances.map(&:data).to_a)
        end

      end

      protected

      def append_to_filters(arg)
        name, value = arg.split("=", 2)
        raise ArgumentError, "no value supplied" unless value
        add_filter(name, value)
      end

      def append_to_tag_list(arg)
        key, value_pattern = arg.split("=", 2)
        add_tag_filter(key, value_pattern)
      end

      def named=(name)
        add_tag_filter("Name", name)
      end

      def stack=(name)
        add_tag_filter("aws:cloudformation:stack-name", name)
      end

      private

      def filters
        @filters ||= []
      end

      def add_filter(name, *values)
        filters << {
          name: name,
          values: values
        }
      end

      def add_tag_filter(key, value_pattern = nil)
        if value_pattern
          add_filter("tag:#{key}", value_pattern)
        else
          add_filter("tag-key", key)
        end
      end

      def instances
        options = {}
        options[:filters] = filters unless filters.empty?
        ec2.instances(options).lazy.map(&Swa::EC2::Instance.method(:new))
      end

    end

    def ec2
      ::Aws::EC2::Resource.new
    end

    def display_data(data)
      puts YAML.dump(data)
    end

  end

end
